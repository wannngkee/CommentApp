{"version":3,"sources":["components/CommentInput.js","reducers/comments.js","containers/CommentInput.js","components/Comment.js","components/CommentList.js","containers/CommentList.js","containers/CommentApp.js","reportWebVitals.js","index.js"],"names":["CommentInput","props","handleUsernameChange","e","setState","username","target","value","handleContentChange","content","handleSubmit","onSubmit","state","createdTime","Date","handleUsernameBlur","onUserNameInputBlur","this","textarea","focus","className","onBlur","onChange","ref","onClick","Component","defaultProps","INIT_COMMENTS","ADD_COMMENT","DELETE_COMMENT","CommentInputContainer","handleSubmitComment","comment","alert","comments","newComments","localStorage","setItem","JSON","stringify","_loadUsername","getItem","_saveUsername","bind","connect","dispatch","type","addComment","Comment","handleDeleteComment","onDeleteComment","index","timeString","_updateTimeString","_timer","setInterval","clearInterval","duration","now","Math","round","max","CommentList","map","i","CommentListContainer","slice","_loadComments","parse","initComments","commentIndex","deleteComment","CommentApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ed55d6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class CommentInput extends Component {\n  static propTypes = {\n    username: PropTypes.any,\n    onSubmit: PropTypes.func,\n    onUserNameInputBlur: PropTypes.func,\n  };\n\n  static defaultProps = {\n    username: \"\",\n    content: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: props.username,\n    };\n  }\n\n  //focus on the content area automatically\n  componentDidMount() {\n    this.textarea.focus();\n  }\n\n  handleUsernameChange = (e) => {\n    this.setState({\n      username: e.target.value,\n    });\n  };\n\n  handleContentChange = (e) => {\n    this.setState({\n      content: e.target.value,\n    });\n  };\n\n  handleSubmit = () => {\n    if (this.props.onSubmit) {\n      this.props.onSubmit({\n        username: this.state.username,\n        content: this.state.content,\n        createdTime: +new Date(),\n      });\n    }\n    this.setState({ content: \"\" });\n  };\n\n  handleUsernameBlur = (e) => {\n    if (this.props.onUserNameInputBlur) {\n      this.props.onUserNameInputBlur(e.target.value);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"comment-inptut\">\n        <div className=\"comment-field\">\n          <span className=\"comment-field-name\">用户名：</span>\n          <div className=\"comment-field-input\">\n            <input\n              value={this.state.username}\n              onBlur={this.handleUsernameBlur}\n              onChange={this.handleUsernameChange}\n            />\n          </div>\n        </div>\n        <div className=\"comment-field\">\n          <span className=\"comment-field-name\">评论：</span>\n          <div className=\"comment-field-input\">\n            <textarea\n              ref={(textarea) => (this.textarea = textarea)}\n              value={this.state.content}\n              onChange={this.handleContentChange}\n            />\n          </div>\n        </div>\n        <div className=\"comment-field-button\">\n          <button onClick={this.handleSubmit}>发布</button>\n        </div>\n      </div>\n    );\n  }\n}\n","//action types\nconst INIT_COMMENTS = \"INIT_COMMENTS\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst DELETE_COMMENT = \"DELETE_COMMENT\";\n\n//reducer\nexport default function reducer(state, action) {\n  if (!state) {\n    state = { comments: [] };\n  }\n  switch (action.type) {\n    case INIT_COMMENTS:\n      return { comments: action.comments };\n    case ADD_COMMENT:\n      return { comments: [...state.comments, action.comment] };\n    case DELETE_COMMENT:\n      return {\n        comments: [\n          ...state.comments.slice(0, action.commentIndex),\n          ...state.comments.slice(action.commentIndex + 1),\n        ],\n      };\n    default:\n      return state;\n  }\n}\n\n//action creators\nexport const initComments = (comments) => {\n  return { type: INIT_COMMENTS, comments };\n};\nexport const addComment = (comment) => {\n  return { type: ADD_COMMENT, comment };\n};\nexport const deleteComment = (commentIndex) => {\n  return { type: DELETE_COMMENT, commentIndex };\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport CommentInput from \"../components/CommentInput\";\nimport { addComment } from \"../reducers/comments\";\n\nclass CommentInputContainer extends Component {\n  static propTypes = {\n    comments: PropTypes.array,\n    onSubmit: PropTypes.func,\n  };\n\n  constructor() {\n    super();\n    this.state = { username: \"\" };\n  }\n\n  componentDidMount() {\n    this._loadUsername();\n  }\n\n  //private function\n  _loadUsername() {\n    const username = localStorage.getItem(\"username\");\n    if (username) {\n      this.setState({ username });\n    }\n  }\n\n  _saveUsername(username) {\n    localStorage.setItem(\"username\", username);\n  }\n\n  handleSubmitComment = (comment) => {\n    if (!comment) return;\n    if (!comment.username) return alert(\"请输入用户名\");\n    if (!comment.content) return alert(\"请输入内容\");\n    const { comments } = this.props;\n    const newComments = [...comments, comment];\n    localStorage.setItem(\"commets\", JSON.stringify(newComments));\n    if (this.props.onSubmit) {\n      this.props.onSubmit(comment);\n    }\n  };\n\n  render() {\n    return (\n      <CommentInput\n        username={this.state.username}\n        onUserNameInputBlur={this._saveUsername.bind(this)}\n        onSubmit={this.handleSubmitComment}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    comments: state.comments,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSubmit: (comment) => {\n      dispatch(addComment(comment));\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentInputContainer);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class Comment extends Component {\n  constructor() {\n    super();\n    this.state = { timeString: \"\" };\n  }\n\n  componentDidMount() {\n    this._updateTimeString();\n    this._timer = setInterval(this._updateTimeString.bind(this), 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._timer);\n  }\n\n  _updateTimeString() {\n    const comment = this.props.comment;\n    const duration = (+Date.now() - comment.createdTime) / 1000;\n    this.setState({\n      timeString:\n        duration > 60\n          ? `${Math.round(duration / 60)} 分钟前`\n          : `${Math.round(Math.max(duration, 1))} 秒前`,\n    });\n  }\n\n  handleDeleteComment = () => {\n    if (this.props.onDeleteComment) {\n      this.props.onDeleteComment(this.props.index);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"comment\">\n        <div className=\"comment-user\">\n          <span>{this.props.comment.username} </span>:\n        </div>\n        <p>&nbsp;{this.props.comment.content}</p>\n        <span className=\"comment-createdtime\">{this.state.timeString}</span>\n        <span className=\"comment-delete\" onClick={this.handleDeleteComment}>\n          删除\n        </span>\n      </div>\n    );\n  }\n}\n\nComment.propTypes = {\n  comment: PropTypes.object.isRequired,\n  onDeleteComment: PropTypes.func,\n  index: PropTypes.number,\n};\n","import React, { Component } from \"react\";\nimport Comment from \"./Comment\";\nimport PropTypes from \"prop-types\";\n\nclass CommentList extends Component {\n  static defaultProps = {\n    comments: [],\n  };\n\n  handleDeleteComment = (index) => {\n    if (this.props.onDeleteComment) {\n      this.props.onDeleteComment(index);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.comments.map((comment, i) => (\n          <Comment\n            comment={comment}\n            key={i}\n            index={i}\n            onDeleteComment={this.handleDeleteComment}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nCommentList.propTypes = {\n  comments: PropTypes.array,\n  onDeleteComment: PropTypes.func,\n};\n\nexport default CommentList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport CommentList from \"../components/CommentList\";\nimport { initComments, deleteComment } from \"../reducers/comments\";\n\nclass CommentListContainer extends Component {\n  static propTypes = {\n    comments: PropTypes.array,\n    initComments: PropTypes.func,\n    onDeleteComment: PropTypes.func,\n  };\n\n  componentDidMount() {\n    this._loadComments();\n  }\n\n  _loadComments() {\n    let comments = localStorage.getItem(\"comments\");\n    comments = comments ? JSON.parse(comments) : [];\n    this.props.initComments(comments);\n  }\n\n  handleDeleteComment = (index) => {\n    const { comments } = this.props;\n    const newComments = [\n      ...comments.slice(0, index),\n      ...comments.slice(index + 1),\n    ];\n    localStorage.setItem(\"comments\", JSON.stringify(newComments));\n    if (this.props.onDeleteComment) {\n      this.props.onDeleteComment(index);\n    }\n  };\n\n  render() {\n    return (\n      <CommentList\n        comments={this.props.comments}\n        onDeleteComment={this.handleDeleteComment}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    comments: state.comments,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initComments: (comments) => {\n      dispatch(initComments(comments));\n    },\n    onDeleteComment: (commentIndex) => {\n      dispatch(deleteComment(commentIndex));\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentListContainer);\n","import React, { Component } from \"react\";\nimport CommentInput from \"./CommentInput\";\nimport CommentList from \"./CommentList\";\n\nexport default class CommentApp extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <CommentInput />\n        <CommentList />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport CommentApp from \"./containers/CommentApp\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport commentsReducer from \"./reducers/comments\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst store = createStore(commentsReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <CommentApp />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}